{
  "reactComponent": {
    "prefix": "rc",
    "body": [
      "import React from 'react'",
      "",
      "type ${TM_FILENAME_BASE}Props = {}",
      "",
      "export const ${TM_FILENAME_BASE} = ({}: ${TM_FILENAME_BASE}Props): JSX.Element => {",
      "  return ${1:<div></div>}",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "reactMemoComponent": {
    "prefix": "rcm",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "type ${TM_FILENAME_BASE}Props = {}",
      "",
      "export const ${TM_FILENAME_BASE} = memo(({}: ${TM_FILENAME_BASE}Props): JSX.Element => {",
      "  return ${1:<div></div>}",
      "})"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "reactHook": {
    "prefix": "rh",
    "body": [
      "import React from 'react'",
      "",
      "type ${TM_FILENAME_BASE}Props = {}",
      "",
      "export const ${TM_FILENAME_BASE} = ({}: ${TM_FILENAME_BASE}Props) => {",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:first} = useContext(${2:second})"]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ]
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ]
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:first} = useRef<${2:type}>(${3:null})"]
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState${3}(${2:second})"
    ]
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "it",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  }
}
